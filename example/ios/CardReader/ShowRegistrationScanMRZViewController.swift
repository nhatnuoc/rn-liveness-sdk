//
//  ShowRegistrationScanMRZViewController.swift
//  QTSIdentityApp
//
//  Created by admin on 20/12/2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import QKMRZParser
import IDCardReader
import React

protocol ShowRegistrationScanMRZDisplayLogic: AnyObject {
    
}

class ShowRegistrationScanMRZViewController: UIViewController, ShowRegistrationScanMRZDisplayLogic {
  var resolve: RCTPromiseResolveBlock?
  var reject: RCTPromiseRejectBlock?
    
    @IBOutlet weak var mrzScannerView: QKMRZScannerView!
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
    }
    
    // MARK: Routing
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "Quét mã MRZ"
        mrzScannerView.delegate = self
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        mrzScannerView.startScanning()
        let appearance = UINavigationBarAppearance.defaultAppearance()
        let textAttributes = [NSAttributedString.Key.foregroundColor: UIColor.white, .font: UIFont.systemFont(ofSize: 17, weight: .semibold)]
        appearance.configureWithOpaqueBackground()
        appearance.titleTextAttributes = textAttributes
        appearance.backgroundColor = .black
        self.navigationController?.navigationBar.standardAppearance = appearance
        self.navigationController?.navigationBar.scrollEdgeAppearance = appearance
        self.navigationController?.navigationBar.compactAppearance = appearance
        self.navigationController?.navigationBar.tintColor = .white
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        mrzScannerView.stopScanning()
        navigationController?.navigationBar.standardAppearance = UINavigationBar.appearance().standardAppearance
        navigationController?.navigationBar.scrollEdgeAppearance = UINavigationBar.appearance().scrollEdgeAppearance
        navigationController?.navigationBar.compactAppearance = UINavigationBar.appearance().compactAppearance
        self.navigationController?.navigationBar.tintColor = UIColor.black
    }
    
}
extension ShowRegistrationScanMRZViewController : StoryboardInitialization {
    typealias Element = ShowRegistrationScanMRZViewController
    static var storyBoard: AppStoryboard = .Registration
}

extension ShowRegistrationScanMRZViewController: QKMRZScannerViewDelegate {
    func mrzScannerView(_ mrzScannerView: QKMRZScannerView, didFind scanResult: QKMRZScanResult) {
      mrzScannerView.stopScanning()
        let cardNumber = scanResult.documentNumber
      var dob = ""
      var doe = ""
      let backCardImage = scanResult.documentImage
       
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "dd/MM/yyyy"
        
        if let date = scanResult.birthdate {
            dob = dateFormatter.string(from: date)
        }
        
        if let date = scanResult.expiryDate {
            doe = dateFormatter.string(from: date)
        }
        
      Task { [weak self] in
          guard let self = self else { return }
        defer {
          self.dismiss(animated: true)
        }
          do {
              let data = try await IDCardReaderManager.shared.initTransaction()
              let parsedInformation = try await IDCardReaderManager.shared.readIDCard(cardId: cardNumber, dateOfBirth: dob, dateOfExpiry: doe, backCardImage: backCardImage, transactionId: data.data)
              print(parsedInformation)
            resolve?(parsedInformation.requestId)
          } catch {
              reject?(nil, nil, error)
          }
      }
    }
}
